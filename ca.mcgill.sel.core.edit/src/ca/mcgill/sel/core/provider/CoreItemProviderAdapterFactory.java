/**
 */
package ca.mcgill.sel.core.provider;

import ca.mcgill.sel.core.util.CoreAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications 
 * into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CoreItemProviderAdapterFactory extends CoreAdapterFactory 
        implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public CoreItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.core.COREImpactModel} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected COREImpactModelItemProvider coreImpactModelItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.core.COREImpactModel}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCOREImpactModelAdapter() {
        if (coreImpactModelItemProvider == null) {
            coreImpactModelItemProvider = new COREImpactModelItemProvider(this);
        }

        return coreImpactModelItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.core.COREConcern} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected COREConcernItemProvider coreConcernItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.core.COREConcern}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCOREConcernAdapter() {
        if (coreConcernItemProvider == null) {
            coreConcernItemProvider = new COREConcernItemProvider(this);
        }

        return coreConcernItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.core.COREFeature} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected COREFeatureItemProvider coreFeatureItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.core.COREFeature}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCOREFeatureAdapter() {
        if (coreFeatureItemProvider == null) {
            coreFeatureItemProvider = new COREFeatureItemProvider(this);
        }

        return coreFeatureItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.core.COREInterface} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected COREInterfaceItemProvider coreInterfaceItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.core.COREInterface}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCOREInterfaceAdapter() {
        if (coreInterfaceItemProvider == null) {
            coreInterfaceItemProvider = new COREInterfaceItemProvider(this);
        }

        return coreInterfaceItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.core.COREReuse} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected COREReuseItemProvider coreReuseItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.core.COREReuse}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCOREReuseAdapter() {
        if (coreReuseItemProvider == null) {
            coreReuseItemProvider = new COREReuseItemProvider(this);
        }

        return coreReuseItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.core.COREImpactNode} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected COREImpactNodeItemProvider coreImpactNodeItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.core.COREImpactNode}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCOREImpactNodeAdapter() {
        if (coreImpactNodeItemProvider == null) {
            coreImpactNodeItemProvider = new COREImpactNodeItemProvider(this);
        }

        return coreImpactNodeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.core.COREFeatureModel} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected COREFeatureModelItemProvider coreFeatureModelItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.core.COREFeatureModel}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCOREFeatureModelAdapter() {
        if (coreFeatureModelItemProvider == null) {
            coreFeatureModelItemProvider = new COREFeatureModelItemProvider(this);
        }

        return coreFeatureModelItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.core.COREModelReuse} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected COREModelReuseItemProvider coreModelReuseItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.core.COREModelReuse}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCOREModelReuseAdapter() {
        if (coreModelReuseItemProvider == null) {
            coreModelReuseItemProvider = new COREModelReuseItemProvider(this);
        }

        return coreModelReuseItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.core.COREContribution} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected COREContributionItemProvider coreContributionItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.core.COREContribution}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCOREContributionAdapter() {
        if (coreContributionItemProvider == null) {
            coreContributionItemProvider = new COREContributionItemProvider(this);
        }

        return coreContributionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected LayoutMapItemProvider layoutMapItemProvider;

    /**
     * This creates an adapter for a {@link java.util.Map.Entry}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createLayoutMapAdapter() {
        if (layoutMapItemProvider == null) {
            layoutMapItemProvider = new LayoutMapItemProvider(this);
        }

        return layoutMapItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.core.LayoutElement} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected LayoutElementItemProvider layoutElementItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.core.LayoutElement}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createLayoutElementAdapter() {
        if (layoutElementItemProvider == null) {
            layoutElementItemProvider = new LayoutElementItemProvider(this);
        }

        return layoutElementItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected LayoutContainerMapItemProvider layoutContainerMapItemProvider;

    /**
     * This creates an adapter for a {@link java.util.Map.Entry}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createLayoutContainerMapAdapter() {
        if (layoutContainerMapItemProvider == null) {
            layoutContainerMapItemProvider = new LayoutContainerMapItemProvider(this);
        }

        return layoutContainerMapItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.core.COREFeatureImpactNode} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected COREFeatureImpactNodeItemProvider coreFeatureImpactNodeItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.core.COREFeatureImpactNode}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCOREFeatureImpactNodeAdapter() {
        if (coreFeatureImpactNodeItemProvider == null) {
            coreFeatureImpactNodeItemProvider = new COREFeatureImpactNodeItemProvider(this);
        }

        return coreFeatureImpactNodeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.core.COREWeightedMapping} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected COREWeightedMappingItemProvider coreWeightedMappingItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.core.COREWeightedMapping}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCOREWeightedMappingAdapter() {
        if (coreWeightedMappingItemProvider == null) {
            coreWeightedMappingItemProvider = new COREWeightedMappingItemProvider(this);
        }

        return coreWeightedMappingItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.core.COREImpactModelBinding} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected COREImpactModelBindingItemProvider coreImpactModelBindingItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.core.COREImpactModelBinding}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCOREImpactModelBindingAdapter() {
        if (coreImpactModelBindingItemProvider == null) {
            coreImpactModelBindingItemProvider = new COREImpactModelBindingItemProvider(this);
        }

        return coreImpactModelBindingItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.core.COREConcernConfiguration} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected COREConcernConfigurationItemProvider coreConcernConfigurationItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.core.COREConcernConfiguration}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCOREConcernConfigurationAdapter() {
        if (coreConcernConfigurationItemProvider == null) {
            coreConcernConfigurationItemProvider = new COREConcernConfigurationItemProvider(this);
        }

        return coreConcernConfigurationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link ca.mcgill.sel.core.COREReuseConfiguration} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected COREReuseConfigurationItemProvider coreReuseConfigurationItemProvider;

    /**
     * This creates an adapter for a {@link ca.mcgill.sel.core.COREReuseConfiguration}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCOREReuseConfigurationAdapter() {
        if (coreReuseConfigurationItemProvider == null) {
            coreReuseConfigurationItemProvider = new COREReuseConfigurationItemProvider(this);
        }

        return coreReuseConfigurationItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (coreImpactModelItemProvider != null) coreImpactModelItemProvider.dispose();
        if (coreConcernItemProvider != null) coreConcernItemProvider.dispose();
        if (coreFeatureItemProvider != null) coreFeatureItemProvider.dispose();
        if (coreInterfaceItemProvider != null) coreInterfaceItemProvider.dispose();
        if (coreReuseItemProvider != null) coreReuseItemProvider.dispose();
        if (coreImpactNodeItemProvider != null) coreImpactNodeItemProvider.dispose();
        if (coreFeatureModelItemProvider != null) coreFeatureModelItemProvider.dispose();
        if (coreModelReuseItemProvider != null) coreModelReuseItemProvider.dispose();
        if (coreContributionItemProvider != null) coreContributionItemProvider.dispose();
        if (layoutMapItemProvider != null) layoutMapItemProvider.dispose();
        if (layoutElementItemProvider != null) layoutElementItemProvider.dispose();
        if (layoutContainerMapItemProvider != null) layoutContainerMapItemProvider.dispose();
        if (coreFeatureImpactNodeItemProvider != null) coreFeatureImpactNodeItemProvider.dispose();
        if (coreWeightedMappingItemProvider != null) coreWeightedMappingItemProvider.dispose();
        if (coreImpactModelBindingItemProvider != null) coreImpactModelBindingItemProvider.dispose();
        if (coreConcernConfigurationItemProvider != null) coreConcernConfigurationItemProvider.dispose();
        if (coreReuseConfigurationItemProvider != null) coreReuseConfigurationItemProvider.dispose();
    }

}
